precision mediump float;
#define LOWPREC lowp
// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes

uniform sampler2D gm_BaseTexture;

uniform bool gm_PS_FogEnabled;
uniform vec4 gm_FogColour;
uniform bool gm_AlphaTestEnabled;
uniform float gm_AlphaRefValue;

void DoAlphaTest(vec4 SrcColour)
{
	if (gm_AlphaTestEnabled)
	{
		if (SrcColour.a <= gm_AlphaRefValue)
		{
			discard;
		}
	}
}

void DoFog(inout vec4 SrcColour, float fogval)
{
	if (gm_PS_FogEnabled)
	{
		SrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); 
	}
}

#define _YY_GLSLES_ 1
varying vec2 v_vTexcoord;
varying vec4 v_vColour;
varying float fCoord;
uniform float time;


vec3 hsv(float H, float S, float V){
    //be sure to add up rgb
    float cn = H*0.025;
    //Col is the fully saturated color.
    vec3 col = vec3((float((H>=0.) && (H<40.))*1.)+(float((H>=200.) && (H<240.))*1.)+(float((H>=40.) && (H<80.))*(2.-cn))+(float((H>=160.) && (H<200.))*(cn-4.)),(float((H>=40.) && (H<120.))*1.)+(float((H>=120.) && (H<160.))*(4.-cn))+(float((H>=0.) && (H<40.))*cn),(float((H>=120.) && (H<200.))*1.)+(float((H>=200.) && (H<240.))*(6.-cn))+(float((H>=80.) && (H<120.))*(cn-2.)));
    vec3 gray = vec3(V,V,V);
    col *= V;
    return gray + (col-gray) * S;
}
void main()
{
    vec4 oldCol = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );
    gl_FragColor = vec4(hsv(mod(fCoord+time,240.),oldCol.r,oldCol.g),oldCol.a);
}
