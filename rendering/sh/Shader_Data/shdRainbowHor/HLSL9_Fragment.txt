// GameMaker reserved and common types/inputs

sampler2D gm_BaseTexture : register(S0);

bool 	gm_PS_FogEnabled;
float4 	gm_FogColour;
bool 	gm_AlphaTestEnabled;
float4	gm_AlphaRefValue;
float3 vec3(float x0, float x1, float x2)
{
    return float3(x0, x1, x2);
}
float4 vec4(float3 x0, float x1)
{
    return float4(x0, x1);
}
// Varyings
static float _fCoord = 0;
static float4 _v_vColour = {0, 0, 0, 0};
static float2 _v_vTexcoord = {0, 0};

static float4 gl_Color[1] =
{
    float4(0, 0, 0, 0)
};


uniform float _gm_AlphaRefValue : register(c3);
uniform bool _gm_AlphaTestEnabled : register(c4);
uniform sampler2D _gm_BaseTexture : register(s0);
uniform float4 _gm_FogColour : register(c5);
uniform bool _gm_PS_FogEnabled : register(c6);

float4 gl_texture2D(sampler2D s, float2 t)
{
    return tex2D(s, t);
}

#define GL_USES_FRAG_COLOR
float mod(float x, float y)
{
    return x - y * floor(x / y);
}

;
;
;
;
;
void _DoAlphaTest(in float4 _SrcColour)
{
{
if(_gm_AlphaTestEnabled)
{
{
if((_SrcColour.w <= _gm_AlphaRefValue))
{
{
discard;
;
}
;
}
;
}
;
}
;
}
}
;
void _DoFog(inout float4 _SrcColour, in float _fogval)
{
{
if(_gm_PS_FogEnabled)
{
{
(_SrcColour = lerp(_SrcColour, _gm_FogColour, clamp(_fogval, 0.0, 1.0)));
}
;
}
;
}
}
;
;
;
;
float3 _hsv(in float _H, in float _S, in float _V)
{
{
float _cn = (_H * 0.025);
bool s0;
{
s0 = (_H >= 0.0);
if(s0)
{
    s0 = (_H < 40.0);
}
}
bool s1;
{
s1 = (_H >= 200.0);
if(s1)
{
    s1 = (_H < 240.0);
}
}
bool s2;
{
s2 = (_H >= 40.0);
if(s2)
{
    s2 = (_H < 80.0);
}
}
bool s3;
{
s3 = (_H >= 160.0);
if(s3)
{
    s3 = (_H < 200.0);
}
}
bool s4;
{
s4 = (_H >= 40.0);
if(s4)
{
    s4 = (_H < 120.0);
}
}
bool s5;
{
s5 = (_H >= 120.0);
if(s5)
{
    s5 = (_H < 160.0);
}
}
bool s6;
{
s6 = (_H >= 0.0);
if(s6)
{
    s6 = (_H < 40.0);
}
}
bool s7;
{
s7 = (_H >= 120.0);
if(s7)
{
    s7 = (_H < 200.0);
}
}
bool s8;
{
s8 = (_H >= 200.0);
if(s8)
{
    s8 = (_H < 240.0);
}
}
bool s9;
{
s9 = (_H >= 80.0);
if(s9)
{
    s9 = (_H < 120.0);
}
}
float3 _col = vec3(((((float(s0) * 1.0) + (float(s1) * 1.0)) + (float(s2) * (2.0 - _cn))) + (float(s3) * (_cn - 4.0))), (((float(s4) * 1.0) + (float(s5) * (4.0 - _cn))) + (float(s6) * _cn)), (((float(s7) * 1.0) + (float(s8) * (6.0 - _cn))) + (float(s9) * (_cn - 2.0))));
float3 _gray = vec3(_V, _V, _V);
(_col *= _V);
return (_gray + ((_col - _gray) * _S));
;
}
}
;
void gl_main()
{
{
float4 _oldCol = (_v_vColour * gl_texture2D(_gm_BaseTexture, _v_vTexcoord));
(gl_Color[0] = vec4(_hsv(mod((_fCoord * 0.30000001), 240.0), 0.60000002, 1.0), _oldCol.w));
}
}
;
struct PS_INPUT
{
    float4 v0 : TEXCOORD0;
    float2 v1 : TEXCOORD1;
    float1 v2 : TEXCOORD2;
};

struct PS_OUTPUT
{
    float4 gl_Color0 : COLOR0;
};

PS_OUTPUT main(PS_INPUT input)
{
    _v_vColour = input.v0;
    _v_vTexcoord = input.v1.xy;
    _fCoord = input.v2.x;

    gl_main();

    PS_OUTPUT output;
    output.gl_Color0 = gl_Color[0];

    return output;
}
